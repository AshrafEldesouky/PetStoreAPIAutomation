{
	"info": {
		"_postman_id": "5b160e34-a98d-4304-b46b-7c4a1a2d9f40",
		"name": "PetStore Colletion",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "7026690",
		"_collection_link": "https://martian-desert-966528.postman.co/workspace/Petstore_Workspace~4adc0497-67c8-4998-aa43-f1b0cbfdaf87/collection/7026690-5b160e34-a98d-4304-b46b-7c4a1a2d9f40?action=share&source=collection_link&creator=7026690"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "1 - Add new Pet to the Store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Store the Pet id in the PetID Varaible For the Other Requests Update & Delete\r",
									"pm.collectionVariables.set(\"PetID\", JSON.parse(responseBody).id);\r",
									"console.log(\"PetID :\" + pm.collectionVariables.get(\"PetID\"));\r",
									"//=-=-=-=-=-=-=-=-======-=-=-=-=-=-=-=-=-======-=-=-=-=-=-=-=-========\r",
									"\r",
									"// Check if the 'Petids_array' collection variable exists\r",
									"if (!pm.collectionVariables.has(\"Petids_array\")) {\r",
									"    pm.collectionVariables.set(\"Petids_array\", []);\r",
									"}\r",
									"// Get the existing array from the collection variable\r",
									"const Petids_array = pm.collectionVariables.get(\"Petids_array\");\r",
									"//=-=-=-=-=-=-=-=-======-=-=-=-=-=-=-=-=-======-=-=-=-=-=-=-=-========\r",
									"\r",
									"//1-Test Case: Verify that the response for creating a new user includes a unique user ID\r",
									"pm.test(\"1.Check the response for creating a new user includes a unique Pet ID\", function () {\r",
									"    // Check for duplicates\r",
									"    if (Petids_array.includes(JSON.parse(responseBody).id)) {\r",
									"        console.log(\"Petids_array length = \" + Petids_array.length);\r",
									"        pm.expect.fail(`Duplicate ID found: ${JSON.parse(responseBody).id}`);\r",
									"\r",
									"    } else {\r",
									"        // If no duplicate, push the new ID into the array\r",
									"        Petids_array.push(JSON.parse(responseBody).id);\r",
									"        // Update the collection variable with the updated array\r",
									"        pm.collectionVariables.set(\"Petids_array\", Petids_array);\r",
									"        // Continue with other assertions or actions\r",
									"        console.log(\"Petids_array length = \" + Petids_array.length);\r",
									"    }\r",
									"});\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.Check Status code of Add new Pet request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"3.Check Status message of Add new Pet request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[FindPetbyStatus] GetRequest: Check if response Body is an object not array\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4-First Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.Check response schema has property id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"5.Check response schema has property category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"})\r",
									"pm.test(\"6.Check response schema has property category.id(category include id)\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"7.Check response schema has property category.name(category include name)\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"8.Check response schema has property name\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"9.Check response schema has property photoUrls\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"photoUrls\")\r",
									"})\r",
									"pm.test(\"10.Check response schema has property tags array\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\")\r",
									"})\r",
									"pm.test(\"11.Check response schema has property tags[i].id (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Checking schema of response, The length of tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.Check response schema has property tags[i].name(tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Checking schema of response , The length of tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.Check response schema has property status\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"14.Check ID property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.Check ID property of category object (category.id)in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.Check name property of category object (category.name)in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.Check name property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.Check response schema has property tags[i].id has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Check the schema of response ,The length of Tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.Check response schema has property tags[i].name has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Check the schema of response , The length of Tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.Check response schema has property status\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"39.Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"40.Check the response has category attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"41.Check the response has category.id attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"42.Check the response has category.name attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"43.Check the response has name attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"44.Check the response has photoUrls attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"45.Check the response has tags attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"46.Check response value of tags[i].id properties (tags include id and name)is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id).to.not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"47.Check response value of  tags[i].name properties (tags include id and name)is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name).to.not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"48.Check the response has status attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"21.Check the response datatype of the id property isnumber \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"22.Check the response datatype of the category property is object\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"23.Check the response datatype of the property.id property is number\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category.id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"24.Check the response data type of the property.id name is string\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category.name)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"25.Check the response datatype of the property name\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).name)\r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"26.Check the response datatype of the array name\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).photoUrls)\r",
									"    pm.expect(typeof JSON.parse(responseBody).photoUrls).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"27.Check the response datatype of the array tags\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).tags)\r",
									"    pm.expect(typeof JSON.parse(responseBody).tags).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"28.Check response datatype of tags[i].id properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody).tags)\r",
									"        pm.expect(typeof JSON.parse(responseBody).tags[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.Check response datatype of tags[i].name properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody).tags)\r",
									"        pm.expect(typeof JSON.parse(responseBody).tags[i].name).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"30.Check the response datatype of the status\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).status)\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"31.Check the response value of ID has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"pm.test(\"32.Check the response value of category length has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.length)\r",
									"    pm.expect(JSON.parse(request.data).category.length).to.equal(JSON.parse(responseBody).category.length)\r",
									"})\r",
									"pm.test(\"33.Check the response value of category.id has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.id)\r",
									"    pm.expect(JSON.parse(request.data).category.id).to.equal(JSON.parse(responseBody).category.id)\r",
									"})\r",
									"pm.test(\"34.Check the response value of category.name has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.name)\r",
									"    pm.expect(JSON.parse(request.data).category.name).to.equal(JSON.parse(responseBody).category.name)\r",
									"})\r",
									"pm.test(\"35.Check the response value of photoUrls length has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).photoUrls.length)\r",
									"    pm.expect(JSON.parse(request.data).photoUrls.length).to.equal(JSON.parse(responseBody).photoUrls.length)\r",
									"})\r",
									"\r",
									"pm.test(\"36.Check response value of tags[i].id properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(request.data).tags[i].id).to.equal(JSON.parse(responseBody).tags[i].id)\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.Check response value of  tags[i].name properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(request.data).tags[i].name).to.equal(JSON.parse(responseBody).tags[i].name)\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.Check the response value of status has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).status)\r",
									"    pm.expect(JSON.parse(request.data).status).to.equal(JSON.parse(responseBody).status)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"pm.test(\"49.Check length of the id at Response body not less than 5 digit\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id.length).to.not.lessThan(5)\r",
									"});\r",
									"pm.test(\"50.Check length of the category.id at Response body not less than 5 digit\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id.length).to.not.lessThan(5)\r",
									"});\r",
									"pm.test(\"51.Check length of the category.name at Response body not less than 5 digit\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.not.lessThan(5)\r",
									"});\r",
									"pm.test(\"52.Check length of the tags[i].id at Response body not less than 5 digit\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id.length).to.not.lessThan(5)\r",
									"    }\r",
									"});\r",
									"pm.test(\"53.Check length of the tags[i].name at Response body not less than 5 digit\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name.length).to.not.lessThan(5)\r",
									"    }\r",
									"});\r",
									"pm.test(\"54.Check length of the status Response body not less than 5 digit\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status.length).to.not.lessThan(15)\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"43.[FindPetbyStatus] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"55.Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"56.Request: t: Check if 'Content-Type' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Content-Type\")).to.be.true;\r",
									"});\r",
									"pm.test(\"56.Request: Content-Type Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"45.[FindPetbyStatus] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-headers\")).to.equal(\"Content-Type,api_key,Authorization\");\r",
									"});\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"46.[FindPetbyStatus] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.equal(\"GET,POST,DELETE,PUT\");\r",
									"});\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"47.[FindPetbyStatus] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"48.[FindPetbyStatus] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"49.[FindPetbyStatus] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"50.[FindPetbyStatus] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Initialize an empty array at the collection level\r",
									"// const Petids_array = [];\r",
									"// pm.collectionVariables.set(\"Petids_array\", []);\r",
									"\r",
									"// if (!pm.collectionVariables.has(\"Petids_array\")) {\r",
									"//     pm.collectionVariables.set(\"Petids_array\", []);\r",
									"// }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 43,\r\n  \"category\": {\r\n    \"id\": 3,\r\n    \"name\": \"Cat\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 34,\r\n      \"name\": \"CatTag\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/v2/pet"
					},
					"response": []
				},
				{
					"name": "2 - uploads an image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.Check Status code of uploadImage request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.Check Status message of uploadImage request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin \r",
									"pm.test(\"4.Check response schema has property code\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.Check response schema has property type\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.Check response schema has property message\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									" pm.test(\"7.Check code property in Response has value is not equal null\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									" pm.test(\"8.Check type property in Response has value is not equal null\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									" pm.test(\"9.Check message property in Response has value is not equal null\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5.Check all response values have expected data type\r",
									"pm.test(\"10.Check the response datatype of the code property\" , function() {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"11.Check the response datatype of the code property\" , function() {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"12.Check the response datatype of the code property\" , function() {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6.Check The values as expected \r",
									"\r",
									"//The request is parameter no body\r",
									"//************************************************************************************************************/\r",
									"//7-Check if the \"title\" field is not undefined\r",
									"pm.test(\"13.Check the response has code attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"14.Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"15.Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//8-Check length of all attributes at Response body not less than 5 digit\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases:\r",
									"//Access-Control-Allow-Headers Header:\r",
									"// Check if the 'accept' Header is Correct\r",
									"pm.test(\"Check if the 'accept' Request Header is Correct\", function () {\r",
									"    pm.expect(pm.request.headers.get(\"accept\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"// Check if the 'Content-Type' Header is Correct\r",
									"pm.test(\"16.Check if the 'Content-Type' Request Header is Correct\", function () {\r",
									"    pm.expect(pm.request.headers.get(\"Content-Type\")).to.eql(\"multipart/form-data\");\r",
									"});\r",
									"\r",
									"// Check if 'additionalMetadata' Field is Present\r",
									"pm.test(\"17.Check if 'additionalMetadata' Field of Request header is Present\", function () {\r",
									"    pm.expect(pm.request.body).to.include(\"name=\\\"additionalMetadata\\\"\\r\\n\\r\\ndd\");\r",
									"});\r",
									"\r",
									"// Check if 'file' Field is Present\r",
									"pm.test(\"18.Check if 'file' Field  of Request header is Present\", function () {\r",
									"    pm.expect(pm.request.body).to.include(\"name=\\\"file\\\"; filename=\\\"n0.png\\\"\\r\\nContent-Type: image/png\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//10-Response Header Test Cases:\r",
									"//Access-Control-Allow-Headers Header:\r",
									"pm.test(\"19.Check if 'access-control-allow-headers'Response Header is Correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-headers\")).to.eql(\"Content-Type,api_key,Authorization\");\r",
									"});\r",
									"pm.test(\"20.Check if 'access-control-allow-methods' Response Header is Correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.eql(\"GET,POST,DELETE,PUT\");\r",
									"});\r",
									"pm.test(\"21.Check if 'access-control-allow-origin' Response Header is Correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.eql(\"*\");\r",
									"});\r",
									"pm.test(\"22.Check if 'content-type' Response Header is Correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/json\");\r",
									"});\r",
									"pm.test(\"23.Check if 'date' Response Header is Present\", function () {\r",
									"    pm.expect(pm.response.headers.has(\"date\")).to.be.true;\r",
									"});\r",
									"pm.test(\"24.Check if 'server' Response Header is Correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"server\")).to.eql(\"Jetty(9.2.9.v20150224)\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "beautifull cat",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/20109/Pictures/n2.png"
								}
							]
						},
						"url": "{{baseurl}}/v2/pet/{{PetID}}/uploadImage"
					},
					"response": []
				},
				{
					"name": "3 - Finds Pets by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[FindPetbyStatus] GetRequest: Check Status code of FindPetbyStatus request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[FindPetbyStatus] GetRequest: Check Status message of FindPetbyStatus request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[FindPetbyStatus] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"3.[FindPetbyStatus] GetRequest: Check response schema has property id for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"4.[FindPetbyStatus] GetRequest: Check response schema has property category for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check category, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"5.[FindPetbyStatus] GetRequest: Check response schema has property category.id(category include id)for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check category.id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        if (JSON.parse(responseBody)[i].category) {\r",
									"            pm.expect(JSON.parse(responseBody)[i].category).to.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"6.[FindPetbyStatus] GetRequest: Check response schema has property category.name(category include name)for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check category.name, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        if (JSON.parse(responseBody)[i].category) {\r",
									"            pm.expect(JSON.parse(responseBody)[i].category).to.have.property(\"name\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"7.[FindPetbyStatus] GetRequest: Check response schema has property name for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check name, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"8.[FindPetbyStatus] GetRequest: Check response schema has property photoUrls for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check name, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"photoUrls\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"9.[FindPetbyStatus] GetRequest: Check response schema has property tags for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check tags, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"tags\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"10.[FindPetbyStatus] GetRequest: Check response schema has property tags.id(category include id)for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check tags.id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        if (JSON.parse(responseBody)[i].category) {\r",
									"            pm.expect(JSON.parse(responseBody)[i].tags).to.have.property(\"id\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[FindPetbyStatus] GetRequest: Check response schema has property tags.name(category include name)for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check tags.id, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        if (JSON.parse(responseBody)[i].category) {\r",
									"            pm.expect(JSON.parse(responseBody)[i].tags).to.have.property(\"name\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[FindPetbyStatus] GetRequest: Check response schema has property status for each object\", function () {\r",
									"    console.log(\"Checking schema of response to check status, The length of response array = \" + JSON.parse(responseBody).length)\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"status\")\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"13.[FindPetbyStatus] GetRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[FindPetbyStatus] GetRequest: Check category.id property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category.id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"15.[FindPetbyStatus] GetRequest: Check category.name property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].category.name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"16.[FindPetbyStatus] GetRequest: Check name property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"17.[FindPetbyStatus] GetRequest: Check photoUrls array in Response has values that are not equal to null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        var photoUrls = JSON.parse(responseBody)[i].photoUrls;\r",
									"        for (var j = 0; j < photoUrls.length; j++) {\r",
									"            pm.expect(photoUrls[j]).to.not.equal(null);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"pm.test(\"18.[FindPetbyStatus] GetRequest: Check response schema has 'tags' array is not null and not empty\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        var tags = JSON.parse(responseBody)[i].tags;\r",
									"        // Check if 'tags' is not null and has a length greater than 0\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags).to.not.be.null;\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags.length).to.be.above(0);\r",
									"    }\r",
									"});\r",
									"pm.test(\"19.[FindPetbyStatus] GetRequest: Check response schema has property tags[i].id has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags.id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[FindPetbyStatus] GetRequest: Check response schema has property tags[i].name has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags.name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[FindPetbyStatus] GetRequest: Check status property in Response has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].status).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"22.[FindPetbyStatus] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody)[i].id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"23.[FindPetbyStatus] GetRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check category is not undefined \" + typeof JSON.parse(responseBody)[i].category)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"24.[FindPetbyStatus] GetRequest: Check the response has category.id attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" ---------> Print Ashraf check category.id is not undefined \" + typeof JSON.parse(responseBody)[i].category.id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category.id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"25.[FindPetbyStatus] GetRequest: Check the response has category.id attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check category.name is not undefined \" + typeof JSON.parse(responseBody)[i].category.name)\r",
									"        pm.expect(JSON.parse(responseBody)[i].category.name).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"26.[FindPetbyStatus] GetRequest: Check the response has name attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check name is not undefined \" + typeof JSON.parse(responseBody)[i].name)\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"27.[FindPetbyStatus] GetRequest: Check the response has photoUrls attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check photoUrls is not undefined \" + typeof JSON.parse(responseBody)[i].photoUrls)\r",
									"        pm.expect(JSON.parse(responseBody)[i].photoUrls).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"28.[FindPetbyStatus] GetRequest: Check the response has tags attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check tags is not undefined \" + typeof JSON.parse(responseBody)[i].tags)\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"29.[FindPetbyStatus] GetRequest: Check the response has tags.id attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check tags.id is not undefined \" + typeof JSON.parse(responseBody)[i].tags.id)\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags.id).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"30.[FindPetbyStatus] GetRequest: Check the response has tags.name attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        console.log(\" Print Ashraf check tags.name is not undefined \" + typeof JSON.parse(responseBody)[i].tags.name)\r",
									"        pm.expect(JSON.parse(responseBody)[i].tags.name).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"pm.test(\"31.[FindPetbyStatus] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody)[i].status).not.be.undefined;\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"32.[FindPetbyStatus] GetRequest: Check the response datatype of the id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(typeof JSON.parse(responseBody)[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"33.[FindPetbyStatus] GetRequest: Check the response datatype of the category property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists after that check the datatype of category \r",
									"        //because may be u will find object dosnt hace categry so how you can check the datatype of this\r",
									"        if (JSON.parse(responseBody)[i].category !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].category).to.equal(\"object\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"34.[FindPetbyStatus] GetRequest: Check the response datatype of the category.id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists and 'id' property exists within 'category'\r",
									"        if (JSON.parse(responseBody)[i].category !== undefined && JSON.parse(responseBody)[i].category.id !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].category.id).to.equal(\"number\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"35.[FindPetbyStatus] GetRequest: Check the response datatype of the category.name property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists and 'id' property exists within 'category'\r",
									"        if (JSON.parse(responseBody)[i].category !== undefined && JSON.parse(responseBody)[i].category.name !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].category.name).to.equal(\"string\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"36.[FindPetbyStatus] GetRequest: Check the response datatype of the name property is string\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'name' property exists\r",
									"        if (JSON.parse(responseBody)[i].name !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].name).to.equal(\"string\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"37.[FindPetbyStatus] GetRequest: Check the response datatype of the photoUrls property is array\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        if (JSON.parse(responseBody)[i].photoUrls !== undefined)\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].photoUrls).to.equal(\"object\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[FindPetbyStatus] GetRequest: Check the response datatype of the tags property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists after that check the datatype of category \r",
									"        //because may be u will find object dosnt hace categry so how you can check the datatype of this\r",
									"        if (JSON.parse(responseBody)[i].tags !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].tags).to.equal(\"object\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[FindPetbyStatus] GetRequest: Check the response datatype of the tags.id property is number\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists and 'id' property exists within 'category'\r",
									"        if (JSON.parse(responseBody)[i].tags !== undefined && JSON.parse(responseBody)[i].tags.id !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].tags.id).to.equal(\"number\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"40.[FindPetbyStatus] GetRequest: Check the response datatype of the tags.name property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists and 'id' property exists within 'category'\r",
									"        if (JSON.parse(responseBody)[i].tags !== undefined && JSON.parse(responseBody)[i].tags.name !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].tags.name).to.equal(\"string\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"pm.test(\"41.[FindPetbyStatus] GetRequest: Check the response datatype of the status property is object\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        // Check if 'category' property exists after that check the datatype of category \r",
									"        //because may be u will find object dosnt hace categry so how you can check the datatype of this\r",
									"        if (JSON.parse(responseBody)[i].status !== undefined) {\r",
									"            pm.expect(typeof JSON.parse(responseBody)[i].status).to.equal(\"string\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"//invaild test cases\r",
									"// pm.test(\"42.[FindPetbyStatus] GetRequest: Check the response value of status has value as expected\", function () {\r",
									"//     for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"//         console.log(JSON.parse(responseBody)[i].id)\r",
									"//         pm.expect(JSON.parse(request.data)[i].id).to.equal(JSON.parse(responseBody)[i].id)\r",
									"//     }\r",
									"// })\r",
									"// pm.test(\"42.[FindPetbyStatus] GetRequest: Check the response value of status has value as expected\", function () {\r",
									"//     for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"//         console.log(JSON.parse(responseBody)[i].status)\r",
									"//         pm.expect(JSON.parse(request.data)[i].status).to.equal(JSON.parse(responseBody)[i].status)\r",
									"//     }\r",
									"// })\r",
									"pm.request.url.query.get(\"status\")\r",
									"pm.test(\"42.[FindPetbyStatus] GetRequest: Check the response value of status: \" + pm.request.url.query.get(\"status\") + \" has value as expected\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"        pm.expect(pm.request.url.query.get(\"status\")).to.equal(JSON.parse(responseBody)[i].status);\r",
									"    }\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									" pm.test(\"43.[FindPetbyStatus] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"// Test Case 2: Check if the \"Accept\" header value is \"application/json\"\r",
									"pm.test(\"44.[FindPetbyStatus] GetRequest: Check if 'Accept' header value is 'application/json'\", function () {\r",
									"    pm.expect(pm.request.headers.get(\"Accept\")).to.equal(\"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"45.[FindPetbyStatus] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-headers\")).to.equal(\"Content-Type,api_key,Authorization\");\r",
									"});\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"46.[FindPetbyStatus] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.equal(\"GET,POST,DELETE,PUT\");\r",
									"});\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"47.[FindPetbyStatus] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"48.[FindPetbyStatus] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"49.[FindPetbyStatus] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"50.[FindPetbyStatus] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/v2/pet/findByStatus?status=available",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - find pet by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[findpetbyid] PostRequest: Check Status code of findpetbyid request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[findpetbyid] PostRequest: Check Status message of findpetbyid request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[findpetbyid] PostRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[findpetbyid] PostRequest: Check response schema has property id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"5.[findpetbyid] PostRequest: Check response schema has property category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"})\r",
									"pm.test(\"6.[findpetbyid] PostRequest: Check response schema has property category.id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"7.[findpetbyid] PostRequest: Check response schema has property category.name\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"6.[findpetbyid] PostRequest: [findpetbyid] PostRequest: Check response schema has property name\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"7.[findpetbyid] PostRequest: [findpetbyid] PostRequest: Check response schema has property photoUrls\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"photoUrls\")\r",
									"})\r",
									"pm.test(\"8.[findpetbyid] PostRequest: [findpetbyid] PostRequest: Check response schema has property 'photoUrls' with specific values\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).photoUrls.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).photoUrls[i]).to.equal(\"string\"); // Replace \"Ashraf\" with the expected value\r",
									"    }\r",
									"});\r",
									"pm.test(\"9.[findpetbyid] PostRequest: [findpetbyid] PostRequest: Check response schema has property tags\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\")\r",
									"})\r",
									"\r",
									"pm.test(\"10.[findpetbyid] PostRequest: [findpetbyid] PostRequest: Check response schema has property tags[i].id (tags include id and name)\" , function() {\r",
									"    for(var i=0;i<JSON.parse(responseBody).tags.length;i++)\r",
									"    {\r",
									"            console.log(\"Checking schema of response, The length of tags = \"+JSON.parse(responseBody).tags.length)\r",
									"            pm.expect(JSON.parse(responseBody).tags[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"11.[findpetbyid] PostRequest: [findpetbyid] PostRequest: Check response schema has property tags[i].name(tags include id and name)\" , function() {\r",
									"    for(var i=0;i<JSON.parse(responseBody).tags.length;i++)\r",
									"    {\r",
									"            console.log(\"Checking schema of response , The length of tags = \"+JSON.parse(responseBody).tags.length)\r",
									"            pm.expect(JSON.parse(responseBody).tags[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"12.[findpetbyid] PostRequest: Check response schema has property status\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"13.[findpetbyid] PostRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[findpetbyid] PostRequest: Check ID property of category object (category.id)in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[findpetbyid] PostRequest: Check name property of category object (category.name)in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[findpetbyid] PostRequest: Check name property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[findpetbyid] PostRequest: Check response schema has property tags[i].id has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Check the schema of response ,The length of Tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"18.[findpetbyid] PostRequest: Check response schema has property tags[i].name has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Check the schema of response , The length of Tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"19.[findpetbyid] PostRequest: Check response schema has property status\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"20.[findpetbyid] PostRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[findpetbyid] PostRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"22.[findpetbyid] PostRequest: Check the response has category.id attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"23.[findpetbyid] PostRequest: Check the response has category.name attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"24.[findpetbyid] PostRequest: Check the response has name attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"25.[findpetbyid] PostRequest: Check the response has photoUrls attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"26.[findpetbyid] PostRequest: Check the response has tags attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"27.[findpetbyid] PostRequest: Check response value of tags[i].id properties (tags include id and name)is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id).to.not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"28.[findpetbyid] PostRequest: Check response value of  tags[i].name properties (tags include id and name)is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name).to.not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"29.[findpetbyid] PostRequest: Check the response has status attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"30.[findpetbyid] PostRequest: Check the response datatype of the id property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"31.Check the response datatype of the category property is object\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"32.[findpetbyid] PostRequest: Check the response datatype of the property.id property is number\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category.id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"33.[findpetbyid] PostRequest: Check the response data type of the property.id name is string\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category.name)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"34.[findpetbyid] PostRequest: Check the response datatype of the property name\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).name)\r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"35.[findpetbyid] PostRequest: Check the response datatype of the array name\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).photoUrls)\r",
									"    pm.expect(typeof JSON.parse(responseBody).photoUrls).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"36.[findpetbyid] PostRequest: Check the response datatype of the array tags\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).tags)\r",
									"    pm.expect(typeof JSON.parse(responseBody).tags).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"37.[findpetbyid] PostRequest: Check response datatype of tags[i].id properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody).tags)\r",
									"        pm.expect(typeof JSON.parse(responseBody).tags[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"38.[findpetbyid] PostRequest: Check response datatype of tags[i].name properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody).tags)\r",
									"        pm.expect(typeof JSON.parse(responseBody).tags[i].name).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"39.[findpetbyid] PostRequest: Check the response datatype of the status\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).status)\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"pm.test(\"40.[findpetbyid] PostRequest: Check the response value of ID has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"pm.test(\"41.[findpetbyid] PostRequest: Check the response value of category length has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.length)\r",
									"    pm.expect(JSON.parse(request.data).category.length).to.equal(JSON.parse(responseBody).category.length)\r",
									"})\r",
									"pm.test(\"42.[findpetbyid] PostRequest: Check the response value of category.id has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.id)\r",
									"    pm.expect(JSON.parse(request.data).category.id).to.equal(JSON.parse(responseBody).category.id)\r",
									"})\r",
									"pm.test(\"43.[findpetbyid] PostRequest: Check the response value of category.name has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.name)\r",
									"    pm.expect(JSON.parse(request.data).category.name).to.equal(JSON.parse(responseBody).category.name)\r",
									"})\r",
									"pm.test(\"44.[findpetbyid] PostRequest: Check the response value of photoUrls length has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).photoUrls.length)\r",
									"    pm.expect(JSON.parse(request.data).photoUrls.length).to.equal(JSON.parse(responseBody).photoUrls.length)\r",
									"})\r",
									"\r",
									"pm.test(\"45.[findpetbyid] PostRequest: Check response value of tags[i].id properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(request.data).tags[i].id).to.equal(JSON.parse(responseBody).tags[i].id)\r",
									"    }\r",
									"})\r",
									"pm.test(\"46.[findpetbyid] PostRequest: Check response value of  tags[i].name properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(request.data).tags[i].name).to.equal(JSON.parse(responseBody).tags[i].name)\r",
									"    }\r",
									"})\r",
									"pm.test(\"47.[findpetbyid] PostRequest: Check the response value of status has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).status)\r",
									"    pm.expect(JSON.parse(request.data).status).to.equal(JSON.parse(responseBody).status)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"48.[findpetbyid] PostRequest: [FindPetbyStatus] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"49.[findpetbyid] PostRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"50.[findpetbyid] PostRequest: Request: t: Check if 'Content-Type' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Content-Type\")).to.be.true;\r",
									"});\r",
									"pm.test(\"51.[findpetbyid] PostRequest: Request: Content-Type Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"45.[FindPetbyStatus] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-headers\")).to.equal(\"Content-Type,api_key,Authorization\");\r",
									"});\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"46.[FindPetbyStatus] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.equal(\"GET,POST,DELETE,PUT\");\r",
									"});\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"47.[FindPetbyStatus] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"48.[FindPetbyStatus] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"49.[FindPetbyStatus] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"50.[FindPetbyStatus] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/pet/{{PetID}}"
					},
					"response": []
				},
				{
					"name": "5 - Update an existing Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[UpdateAnExistingPet] PutRequest: Check Status code of findpetbyid request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[UpdateAnExistingPet] PutRequest: Check Status message of findpetbyid request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[UpdateAnExistingPet] PutRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[UpdateAnExistingPet] PutRequest: Check response schema has property id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"5.[UpdateAnExistingPet] PutRequest: Check response schema has property category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"})\r",
									"pm.test(\"6.[UpdateAnExistingPet] PutRequest: Check response schema has property category.id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"7.[UpdateAnExistingPet] PutRequest: Check response schema has property category.name\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"8.[UpdateAnExistingPet] PutRequest: Check response schema has property name\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"9.[UpdateAnExistingPet] PutRequest: PostRequest: Check response schema has property photoUrls\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"photoUrls\")\r",
									"})\r",
									"pm.test(\"10.[UpdateAnExistingPet] PutRequest: Check response schema has property 'photoUrls' with specific values\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).photoUrls.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).photoUrls[i]).to.equal(\"C:\\\\image\"); // Replace \"Ashraf\" with the expected value\r",
									"    }\r",
									"});\r",
									"pm.test(\"11.[UpdateAnExistingPet] PutRequest: Check response schema has property tags\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\")\r",
									"})\r",
									"\r",
									"pm.test(\"12.[UpdateAnExistingPet] PutRequest: Check response schema has property tags[i].id (tags include id and name)\" , function() {\r",
									"    for(var i=0;i<JSON.parse(responseBody).tags.length;i++)\r",
									"    {\r",
									"            console.log(\"Checking schema of response, The length of tags = \"+JSON.parse(responseBody).tags.length)\r",
									"            pm.expect(JSON.parse(responseBody).tags[i]).to.have.property(\"id\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"13.[UpdateAnExistingPet] PutRequest: Check response schema has property tags[i].name(tags include id and name)\" , function() {\r",
									"    for(var i=0;i<JSON.parse(responseBody).tags.length;i++)\r",
									"    {\r",
									"            console.log(\"Checking schema of response , The length of tags = \"+JSON.parse(responseBody).tags.length)\r",
									"            pm.expect(JSON.parse(responseBody).tags[i]).to.have.property(\"name\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"14.[UpdateAnExistingPet] PutRequest: Check response schema has property status\" , function() {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"15.[UpdateAnExistingPet] PutRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[UpdateAnExistingPet] PutRequest: Check ID property of category object (category.id)in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[UpdateAnExistingPet] PutRequest: Check name property of category object (category.name)in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[UpdateAnExistingPet] PutRequest: Check name property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[[UpdateAnExistingPet] PutRequest: Check response schema has property tags[i].id has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Check the schema of response ,The length of Tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"20.[UpdateAnExistingPet] PutRequest: Check response schema has property tags[i].name has value is not equal null\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(\"Check the schema of response , The length of Tags = \" + JSON.parse(responseBody).tags.length)\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name).to.not.equal(null)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response schema has property status\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has category attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has category.id attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has category.name attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has name attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has photoUrls attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has tags attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response value of tags[i].id properties (tags include id and name)is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].id).to.not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response value of  tags[i].name properties (tags include id and name)is not undefined\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(responseBody).tags[i].name).to.not.be.undefined;\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response has status attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the id property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the category property is object\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the property.id property is number\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category.id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response data type of the property.id name is string\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).category.name)\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the property name\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).name)\r",
									"    pm.expect(typeof JSON.parse(responseBody).name).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the array name\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).photoUrls)\r",
									"    pm.expect(typeof JSON.parse(responseBody).photoUrls).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the array tags\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).tags)\r",
									"    pm.expect(typeof JSON.parse(responseBody).tags).to.equal(\"object\")\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response datatype of tags[i].id properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody).tags)\r",
									"        pm.expect(typeof JSON.parse(responseBody).tags[i].id).to.equal(\"number\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response datatype of tags[i].name properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        console.log(typeof JSON.parse(responseBody).tags)\r",
									"        pm.expect(typeof JSON.parse(responseBody).tags[i].name).to.equal(\"string\")\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response datatype of the status\", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).status)\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response value of ID has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response value of category length has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.length)\r",
									"    pm.expect(JSON.parse(request.data).category.length).to.equal(JSON.parse(responseBody).category.length)\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response value of category.id has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.id)\r",
									"    pm.expect(JSON.parse(request.data).category.id).to.equal(JSON.parse(responseBody).category.id)\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response value of category.name has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).category.name)\r",
									"    pm.expect(JSON.parse(request.data).category.name).to.equal(JSON.parse(responseBody).category.name)\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response value of photoUrls length has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).photoUrls.length)\r",
									"    pm.expect(JSON.parse(request.data).photoUrls.length).to.equal(JSON.parse(responseBody).photoUrls.length)\r",
									"})\r",
									"\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response value of tags[i].id properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(request.data).tags[i].id).to.equal(JSON.parse(responseBody).tags[i].id)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check response value of  tags[i].name properties (tags include id and name)\", function () {\r",
									"    for (var i = 0; i < JSON.parse(responseBody).tags.length; i++) {\r",
									"        pm.expect(JSON.parse(request.data).tags[i].name).to.equal(JSON.parse(responseBody).tags[i].name)\r",
									"    }\r",
									"})\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the response value of status has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).status)\r",
									"    pm.expect(JSON.parse(request.data).status).to.equal(JSON.parse(responseBody).status)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Request: t: Check if 'Content-Type' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Content-Type\")).to.be.true;\r",
									"});\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Request: Content-Type Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"421.[UpdateAnExistingPet] PutRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-headers\")).to.equal(\"Content-Type,api_key,Authorization\");\r",
									"});\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.equal(\"GET,POST,DELETE,PUT\");\r",
									"});\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"21.[UpdateAnExistingPet] PutRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 5,\r\n  \"category\": {\r\n    \"id\": 6,\r\n    \"name\": \"dog\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"C:\\\\image\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 5,\r\n      \"name\": \"cute dog\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/v2/pet"
					},
					"response": []
				},
				{
					"name": "6 - Updates a pet in the store from the data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[UpdatesPetinPtorefromtheData] PutRequest: Check Status code of UpdatesPetinPtorefromtheData request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[UpdatesPetinPtorefromtheData] PutRequest: Check Status message of UpdatesPetinPtorefromtheData request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[UpdatesPetinPtorefromtheData] PutRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"3.[UpdatesPetinPtorefromtheData] PutRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"3.[UpdatesPetinPtorefromtheData] PutRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"4.[UpdatesPetinPtorefromtheData] PutRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"5.[UpdatesPetinPtorefromtheData] PutRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"6.[UpdatesPetinPtorefromtheData] PutRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"7.[UpdatesPetinPtorefromtheData] PutRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"8.[UpdatesPetinPtorefromtheData] PutRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"9.[UpdatesPetinPtorefromtheData] PutRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"10.[UpdatesPetinPtorefromtheData] PutRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"11.[UpdateAnExistingPet] PutRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"12.[UpdateAnExistingPet] PutRequest: Check the response datatype of the[type]  property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"13.[UpdateAnExistingPet] PutRequest: Check the response datatype of the [message] property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"14.[UpdateAnExistingPet] PutRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    // pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"15.[UpdateAnExistingPet] PutRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"16.[UpdateAnExistingPet] PutRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"17.[UpdateAnExistingPet] PutRequest: Request: t: Check if 'Content-Type' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Content-Type\")).to.be.true;\r",
									"});\r",
									"pm.test(\"18.[UpdateAnExistingPet] PutRequest: Request: Content-Type Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\", \"application/x-www-form-urlencoded\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"19.[UpdatesPetinPtorefromtheData] PutRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-headers\")).to.equal(\"Content-Type,api_key,Authorization\");\r",
									"});\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"20.[UpdatesPetinPtorefromtheData] PutRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-methods\")).to.equal(\"GET,POST,DELETE,PUT\");\r",
									"});\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"21.[UpdatesPetinPtorefromtheData] PutRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"22.[UpdatesPetinPtorefromtheData] PutRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"23.[UpdatesPetinPtorefromtheData] PutRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"24.[UpdatesPetinPtorefromtheData] PutRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/v2/pet/{{PetID}}?name=cat&status=pending",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"v2",
								"pet",
								"{{PetID}}"
							],
							"query": [
								{
									"key": "name",
									"value": "cat"
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7 - Delete a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[DeletePet] DeleteRequest: Check Status code of DeletePet request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[DeletePet] DeleteRequest: Check Status message of DeletePet request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[DeletePet] DeleteRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[DeletePet] DeleteRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[DeletePet] DeleteRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[DeletePet] DeleteRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[DeletePet] DeleteRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[DeletePet] DeleteRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[UpdatesPetinPtorefromtheData] PutRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[UpdatesPetinPtorefromtheData] PutRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[DeletePet] DeleteRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[DeletePet] DeleteRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[DeletePet] DeleteRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[DeletePet] DeleteRequest: Check the response datatype of the[type]  property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[DeletePet] DeleteRequest: Check the response datatype of the [message] property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[DeletePet] DeleteRequest:  Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    // pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"17.[DeletePet] DeleteRequest:  Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"18.[DeletePet] DeleteRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[DeletePet] DeleteRequest: Request: Check if 'api_key' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"x-api-key\")).to.be.true;\r",
									"});\r",
									"pm.test(\"20.[DeletePet] DeleteRequest: Request: 'x-api-key' Header is '1'\", function () {\r",
									"    pm.expect(pm.request.headers.get(\"x-api-key\")).to.equal(\"1\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[DeletePet] DeleteRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace    \r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[DeletePet] DeleteRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[DeletePet] DeleteRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[DeletePet] DeleteRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[DeletePet] DeleteRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[DeletePet] DeleteRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/pet/{{PetID}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "1 - Place an order for a Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"\r",
									" \r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[PlaceOSrderforPet] PostRequest: Check Status code of findpetbyid request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[PlaceOSrderforPet] PostRequest: Check Status message of findpetbyid request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[PlaceOSrderforPet] PostRequest: Check if response Body is an object not array \", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[PlaceOSrderforPet] PostRequest: Check response schema has property id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"5.[PlaceOSrderforPet] PostRequest: Check response schema has property petId\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"})\r",
									"pm.test(\"6.[PlaceOSrderforPet] PostRequest: Check response schema has property quantity\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"})\r",
									"pm.test(\"7.[PlaceOSrderforPet] PostRequest: Check response schema has property shipDate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"})\r",
									"pm.test(\"8.[PlaceOSrderforPet] PostRequest: Check response schema has property status\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"})\r",
									"pm.test(\"9.[PlaceOSrderforPet] PostRequest: Check response schema has property complete\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"complete\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"    // because the object and array contain properties\r",
									"pm.test(\"10.[PlaceOSrderforPet] PostRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"11.[PlaceOSrderforPet] PostRequest: Check petId property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"12.[PlaceOSrderforPet] PostRequest: Check quantity property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"13.[PlaceOSrderforPet] PostRequest: Check shipDate property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[PlaceOSrderforPet] PostRequest: Check status property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[PlaceOSrderforPet] PostRequest: Check complete property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"16.[PlaceOSrderforPet] PostRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"17.[PlaceOSrderforPet] PostRequest: Check the response has petId attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"18.[PlaceOSrderforPet] PostRequest: Check the response has quantity attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"19.[PlaceOSrderforPet] PostRequest: Check the response has shipDate attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"20.[PlaceOSrderforPet] PostRequest: Check the response has status attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[PlaceOSrderforPet] PostRequest: Check the response has complete attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"22.[PlaceOSrderforPet] PostRequest: Check the response datatype of the id property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"23.[PlaceOSrderforPet] PostRequest: Check the response datatype of the petId property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).petId)\r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"24.[PlaceOSrderforPet] PostRequest: Check the response datatype of the quantity property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).quantity)\r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"25.[PlaceOSrderforPet] PostRequest: Check the response datatype of the shipDate property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).shipDate)\r",
									"    pm.expect(typeof JSON.parse(responseBody).shipDate).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"26.[PlaceOSrderforPet] PostRequest: Check the response datatype of the status property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).status)\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"27.[PlaceOSrderforPet] PostRequest: Check the response datatype of the complete property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).complete)\r",
									"    pm.expect(typeof JSON.parse(responseBody).complete).to.equal(\"boolean\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"28.[PlaceOrderforPet] PostRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // Parse the response body as JSON\r",
									"    console.log(\"Request.id = \" + JSON.parse(responseBody).id);\r",
									"    console.log(\"Response.id = \" + JSON.parse(request.data).id);\r",
									"\r",
									"    // Compare the \"id\" property between request and response\r",
									"    pm.expect(JSON.parse(responseBody).id).to.equal(JSON.parse(request.data).id);\r",
									"});\r",
									"\r",
									"pm.test(\"29.[PlaceOSrderforPet] PostRequest: Check the response value of ID has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).petId)\r",
									"    pm.expect(JSON.parse(request.data).petId).to.equal(JSON.parse(responseBody).petId)\r",
									"})\r",
									"pm.test(\"30.[PlaceOSrderforPet] PostRequest: Check the response value of petId has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).quantity)\r",
									"    pm.expect(JSON.parse(request.data).quantity).to.equal(JSON.parse(responseBody).quantity)\r",
									"})\r",
									"pm.test(\"31.[PlaceOSrderforPet] PostRequest: Check the response value of shipDate has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).shipDate)\r",
									"    pm.expect(JSON.parse(request.data).shipDate).to.equal(JSON.parse(responseBody).shipDate)\r",
									"})\r",
									"pm.test(\"32.[PlaceOSrderforPet] PostRequest: Check the response value of status has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).status)\r",
									"    pm.expect(JSON.parse(request.data).status).to.equal(JSON.parse(responseBody).status)\r",
									"})\r",
									"pm.test(\"33.[PlaceOSrderforPet] PostRequest: Check the response value of complete has value as expected\", function () {\r",
									"    console.log(JSON.parse(responseBody).complete)\r",
									"    pm.expect(JSON.parse(request.data).complete).to.equal(JSON.parse(responseBody).complete)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"function countDigits(id) {\r",
									"  // Convert the ID to a string.\r",
									"  const idString = String(id);\r",
									"  // Count the number of digits in the string.\r",
									"  let digitCount = 0;\r",
									"  for (let i = 0; i < idString.length; i++) {\r",
									"    if (/\\d/.test(idString[i])) {\r",
									"      digitCount++;\r",
									"    }\r",
									"  }\r",
									"  // Return the number of digits.\r",
									"  return digitCount<5;\r",
									"}\r",
									"\r",
									"pm.test(\"34.[PlaceOSrderforPet] PostRequest: Check if 'id' in Response body has at least 5 digits or is a single digit\", function () {\r",
									"    // Check if the digit count is at least 5 digit\r",
									"    pm.expect(countDigits(JSON.parse(responseBody).id)).to.be.true;//read from function\r",
									"});\r",
									"\r",
									"pm.test(\"35.[PlaceOSrderforPet] PostRequest: Check length of the petId at Response body not less than 5 digit\", function () {\r",
									"       pm.expect(countDigits(JSON.parse(responseBody).petId)).to.be.true;//read from function\r",
									"});\r",
									"pm.test(\"36.[PlaceOSrderforPet] PostRequest: Check length of the quantity at Response body not less than 5 digit\", function () {\r",
									"    pm.expect(countDigits(JSON.parse(responseBody).quantity)).to.be.true;//read from function\r",
									"    // pm.expect(JSON.parse(responseBody).quantity.length).to.be.not.lessThan(5)\r",
									"    // pm.expect(JSON.parse(responseBody).quantity.toString().length).to.be.not.lessThan(5)\r",
									"    console.log(JSON.parse(responseBody).quantity.toString().length);\r",
									"    \r",
									"});\r",
									"pm.test(\"37.[PlaceOSrderforPet] PostRequest: Check length of the shipDate at Response body not less than 5 digit\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate.length).to.not.lessThan(28)\r",
									"});\r",
									"pm.test(\"38.[PlaceOSrderforPet] PostRequest: Check length of the 'status' at Response body is not less than 10 characters\", function () {\r",
									"    // Check if the length of the 'status' string is not less than 10\r",
									"    pm.expect(JSON.parse(responseBody).status.length).to.be.not.lessThan(5)\r",
									"});\r",
									"pm.test(\"39.[PlaceOSrderforPet] PostRequest: Check length of the 'complete' at Response body is not less than 5 letters\", function () {\r",
									"    // Get the 'complete' value from the response body and convert it to a string\r",
									"    var completeString = JSON.parse(responseBody).complete.toString();\r",
									"\r",
									"    // Check if the length of the 'completeString' is not less than 4 (for \"true\")\r",
									"    pm.expect(completeString.length).to.be.at.least(4);\r",
									"});\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"40.[PlaceOSrderforPet] PostRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"41.[PlaceOSrderforPet] PostRequest: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"42.[PlaceOSrderforPet] PostRequest: Check if 'Content-Type' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Content-Type\")).to.be.true;\r",
									"});\r",
									"pm.test(\"43.[PlaceOSrderforPet] PostRequest: Content-Type Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"44.[PlaceOrderforPet] PostRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"45.[PlaceOSrderforPet] PostRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"46.[PlaceOSrderforPet] PostRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"47.[PlaceOSrderforPet] PostRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"48.[PlaceOSrderforPet] PostRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"49.[PlaceOSrderforPet] PostRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"petId\": 1,\r\n  \"quantity\": 2,\r\n  \"shipDate\": \"2023-09-20T13:48:56.184Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/v2/store/order"
					},
					"response": []
				},
				{
					"name": "2 - Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[FindPurchaseOrderbyID] GetRequest: Check Status code of UpdatesPetinPtorefromtheData request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[FindPurchaseOrderbyID] GetRequest: Check Status message of UpdatesPetinPtorefromtheData request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[FindPurchaseOrderbyID] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[FindPurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"5.[FindPurchaseOrderbyID] GetRequest: Check response schema has property petId\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"})\r",
									"pm.test(\"6.[FindPurchaseOrderbyID] GetRequest: Check response schema has property quantity\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"})\r",
									"pm.test(\"4.[FindPurchaseOrderbyID] GetRequest: Check response schema has property shipDate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"})\r",
									"pm.test(\"5.[FindPurchaseOrderbyID] GetRequest: Check response schema has property status\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"})\r",
									"pm.test(\"6.[FindPurchaseOrderbyID] GetRequest: Check response schema has property complete\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"complete\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[FindPurchaseOrderbyID] GetRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[FindPurchaseOrderbyID] GetRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[FindPurchaseOrderbyID] GetRequest: Check the response has petId attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[FindPurchaseOrderbyID] GetRequest: Check the response has quantity attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"10.[FindPurchaseOrderbyID] GetRequest: Check the response has shipDate attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[FindPurchaseOrderbyID] GetRequest: Check the response has status attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[FindPurchaseOrderbyID] GetRequest: Check the response has complete attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[FindPurchaseOrderbyID] GetRequest: Check the response datatype of the [id] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[FindPurchaseOrderbyID] GetRequest: Check the response datatype of the[petId]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).petId)\r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"15.[FindPurchaseOrderbyID] GetRequest: Check the response datatype of the [quantity] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).quantity)\r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"16.[FindPurchaseOrderbyID] GetRequest: Check the response datatype of the [shipDate] property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).shipDate)\r",
									"    pm.expect(typeof JSON.parse(responseBody).shipDate).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"17.[FindPurchaseOrderbyID] GetRequest: Check the response datatype of the[status]  property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).status)\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"18.[FindPurchaseOrderbyID] GetRequest: Check the response datatype of the [complete] property is boolean \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).complete)\r",
									"    pm.expect(typeof JSON.parse(responseBody).complete).to.equal(\"boolean\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"19.[FindPurchaseOrderbyID] GetRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    // pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"20.[FindPurchaseOrderbyID] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"21.[FindPurchaseOrderbyID] GetRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"22.[FindPurchaseOrderbyID] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"23.[FindPurchaseOrderbyID] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"24.[FindPurchaseOrderbyID] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"25.[FindPurchaseOrderbyID] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"26.[FindPurchaseOrderbyID] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"27.[FindPurchaseOrderbyID] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/store/order/1"
					},
					"response": []
				},
				{
					"name": "3 - Return pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[ReturnPetInventoriesbyStatus] GetRequest: Check Status code of UpdatesPetinPtorefromtheData request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[ReturnPetInventoriesbyStatus] GetRequest: Check Status message of UpdatesPetinPtorefromtheData request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[ReturnPetInventoriesbyStatus] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[FindPurchaseOrderbyID] GetRequest: Check response schema has property totvs\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totvs\")\r",
									"})\r",
									"pm.test(\"5.[FindPurchaseOrderbyID] GetRequest: Check response schema has property sold\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"sold\")\r",
									"})\r",
									"pm.test(\"6.[FindPurchaseOrderbyID] GetRequest: Check response schema has property new status added\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"new status added\")\r",
									"})\r",
									"pm.test(\"7.[FindPurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"{{PetStatus-Updated}}\")\r",
									"})\r",
									"pm.test(\"8.[FindPurchaseOrderbyID] GetRequest: Check response schema has property totvs\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"5000\")\r",
									"})\r",
									"pm.test(\"9.[FindPurchaseOrderbyID] GetRequest: Check response schema has property totvs\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"6000\")\r",
									"})\r",
									"pm.test(\"10.[FindPurchaseOrderbyID] GetRequest: Check response schema has property sold\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"string\")\r",
									"})\r",
									"pm.test(\"11.[FindPurchaseOrderbyID] GetRequest: Check response schema has property new status added\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"unavailable\")\r",
									"})\r",
									"pm.test(\"12.[FindPurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"created\")\r",
									"})\r",
									"pm.test(\"13.[FindPurchaseOrderbyID] GetRequest: Check response schema has property totvs\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"pending\")\r",
									"})\r",
									"pm.test(\"14.[FindPurchaseOrderbyID] GetRequest: Check response schema has property new status added\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"available\")\r",
									"})\r",
									"pm.test(\"15.[FindPurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"weisskeiner1\")\r",
									"})\r",
									"pm.test(\"16.[FindPurchaseOrderbyID] GetRequest: Check response schema has property totvs\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"3000\")\r",
									"})\r",
									"pm.test(\"17.[FindPurchaseOrderbyID] GetRequest: Check response schema has property sold\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"Launched\")\r",
									"})\r",
									"pm.test(\"18.[FindPurchaseOrderbyID] GetRequest: Check response schema has property new status added\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"soldout\")\r",
									"})\r",
									"pm.test(\"19.[FindPurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"avaidfglable\")\r",
									"})\r",
									"pm.test(\"20.[FindPurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"not available\")\r",
									"})\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"22.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totvs).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"23.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"24.[FindPurchaseOrderbyID] GetRequest: Check [new status added] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"new status added\"]).to.not.equal(null);\r",
									"});\r",
									"pm.test(\"25.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"PetStatus-Updated\"]).to.not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"26.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"5000\"]).to.not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"27.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"28.[FindPurchaseOrderbyID] GetRequest: Check [unavailable] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).unavailable).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"29.[FindPurchaseOrderbyID] GetRequest: Check [created] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).created).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"30.[FindPurchaseOrderbyID] GetRequest: Check [pending] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"31.[FindPurchaseOrderbyID] GetRequest: Check [available] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"32.[FindPurchaseOrderbyID] GetRequest: Check [weisskeiner1] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).weisskeiner1).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"33.[FindPurchaseOrderbyID] GetRequest: Check [Launched] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).Launched).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"34.[FindPurchaseOrderbyID] GetRequest: Check [soldout] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).soldout).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"35.[FindPurchaseOrderbyID] GetRequest: Check [avaidfglable] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).avaidfglable).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"36.[FindPurchaseOrderbyID] GetRequest: Check [estatus] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).estatus).to.not.equal(null)\r",
									"})\r",
									"\r",
									"pm.test(\"37.[FindPurchaseOrderbyID] GetRequest: Check [not available] property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"not available\"]).to.not.equal(null);\r",
									"})\r",
									"\r",
									"pm.test(\"38.[FindPurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"39.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).totvs).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"41.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"42.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"   pm.expect(JSON.parse(responseBody)[\"new status added\"]).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"43.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"{{PetStatus-Updated}}\"]).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"44.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[5000]).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"45.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"6000\"]).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"46.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"47.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).unavailable).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"48.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).created).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"49.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"50.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"51.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).weisskeiner1).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"52.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"3000\"]).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"53.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).Launched).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"54.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).soldout).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"55.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).avaidfglable).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"56.[FindPurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[\"not available\"]).to.not.be.undefined;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/store/inventory"
					},
					"response": []
				},
				{
					"name": "4 - Delete purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[DeletePurchaseOrderbyID] GetRequest: Check Status code of DeletePurchaseOrderbyID request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[DeletePurchaseOrderbyID] GetRequest: Check Status message of UpdatesPetinPtorefromtheData request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[DeletePurchaseOrderbyID] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[DeletePurchaseOrderbyID] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[DeletePurchaseOrderbyID] GetRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[DeletePurchaseOrderbyID] GetRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[DeletePurchaseOrderbyID] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[DeletePurchaseOrderbyID] GetRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[DeletePurchaseOrderbyID] GetRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[DeletePurchaseOrderbyID] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[DeletePurchaseOrderbyID] GetRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[DeletePurchaseOrderbyID] GetRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[DeletePurchaseOrderbyID] GetRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[DeletePurchaseOrderbyID] GetRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[DeletePurchaseOrderbyID] GetRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"19.[DeletePurchaseOrderbyID] GetRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    // pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"20.[DeletePurchaseOrderbyID] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"21.[DeletePurchaseOrderbyID] GetRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"22.[DeletePurchaseOrderbyID] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"23.[DeletePurchaseOrderbyID] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"24.[DeletePurchaseOrderbyID] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"25.[DeletePurchaseOrderbyID] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"26.[DeletePurchaseOrderbyID] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"27.[DeletePurchaseOrderbyID] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/store/order/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "1 - Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_username', JSON.parse(request.data).username);\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_password', JSON.parse(request.data).password);\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateUser_ID', JSON.parse(request.data).id);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[CreateUser] PostRequest: Check Status code of DeletePurchaseOrderbyID request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[CreateUser] PostRequest: Check Status message of UpdatesPetinPtorefromtheData request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[CreateUser] PostRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[CreateUser] PostRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[CreateUser] PostRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[CreateUser] PostRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"6.[CreateUser] PostRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"7.[CreateUser] PostRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[CreateUser] PostRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"9.[CreateUser] PostRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"10.[CreateUser] PostRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[CreateUser] PostRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"12.[CreateUser] PostRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"13.[CreateUser] PostRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"14.[CreateUser] PostRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"15.[CreateUser] PostRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    // pm.expect(JSON.parse(request.data).id).to.equal(JSON.parse(responseBody).id)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"16.[CreateUser] PostRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"17.[CreateUser] PostRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"18.[CreateUser] PostRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"19.[CreateUser] PostRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"20.[CreateUser] PostRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"21.[CreateUser] PostRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"22.[CreateUser] PostRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"23.[CreateUser] PostRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 2,\r\n  \"username\": \"ashraf\",\r\n  \"firstName\": \"mohamed\",\r\n  \"lastName\": \"Hassn\",\r\n  \"email\": \"ashraf@amc.com\",\r\n  \"password\": \"@bcd1234AS\",\r\n  \"phone\": \"+201099561971\",\r\n  \"userStatus\": 0\r\n}"
						},
						"url": "{{baseurl}}/v2/user"
					},
					"response": []
				},
				{
					"name": "2 - Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[GetuserByUsername] GetRequest: Check Status code of findpetbyid request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[GetuserByUsername] GetRequest: Check Status message of findpetbyid request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[GetuserByUsername] GetRequest: Check if response Body is an object not array \", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[GetuserByUsername] GetRequest: Check response schema has property id\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"5.[GetuserByUsername] GetRequest: Check response schema has property username\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"})\r",
									"pm.test(\"6.[GetuserByUsername] GetRequest: Check response schema has property firstName\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstName\")\r",
									"})\r",
									"pm.test(\"7.[GetuserByUsername] GetRequest: Check response schema has property lastName\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastName\")\r",
									"})\r",
									"pm.test(\"8.[GetuserByUsername] GetRequest: Check response schema has property email\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"})\r",
									"pm.test(\"9.[GetuserByUsername] GetRequest: Check response schema has property password\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"})\r",
									"pm.test(\"10.[GetuserByUsername] GetRequest: Check response schema has property phone\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"phone\")\r",
									"})\r",
									"pm.test(\"11.[GetuserByUsername] GetRequest: Check response schema has property userStatus\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userStatus\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"12.[GetuserByUsername] GetRequest: Check ID property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"13.[GetuserByUsername] GetRequest: Check username property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"14.[GetuserByUsername] GetRequest: Check firstName property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"15.[GetuserByUsername] GetRequest: Check lastName property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"16.[GetuserByUsername] GetRequest: Check email property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"17.[GetuserByUsername] GetRequest: Check password property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"18.[GetuserByUsername] GetRequest: Check phone property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"19.[GetuserByUsername] GetRequest: Check userStatus property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"20.[GetuserByUsername] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"21.[GetuserByUsername] GetRequest: Check the response has username attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"22.[GetuserByUsername] GetRequest: Check the response has firstName attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"23.[GetuserByUsername] GetRequest: Check the response has lastName attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"24.[GetuserByUsername] GetRequest: Check the response has email attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"25.[GetuserByUsername] GetRequest: Check the response has password attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"26.[GetuserByUsername] GetRequest: Check the response has phone attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"27.[GetuserByUsername] GetRequest: Check the response has userStatus attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"28.[GetuserByUsername] GetRequest: Check the response datatype of the id property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).id)\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"29.[GetuserByUsername] GetRequest: Check the response username of the username property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).username)\r",
									"    pm.expect(typeof JSON.parse(responseBody).username).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"30.[GetuserByUsername] GetRequest: Check the response datatype of the firstName property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).firstName)\r",
									"    pm.expect(typeof JSON.parse(responseBody).firstName).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"31.[GetuserByUsername] GetRequest: Check the response datatype of the lastName property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).lastName)\r",
									"    pm.expect(typeof JSON.parse(responseBody).lastName).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"32.[GetuserByUsername] GetRequest: Check the response datatype of the email property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).email)\r",
									"    pm.expect(typeof JSON.parse(responseBody).email).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"33.[GetuserByUsername] GetRequest: Check the response datatype of the password property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).password)\r",
									"    pm.expect(typeof JSON.parse(responseBody).password).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"34.[GetuserByUsername] GetRequest: Check the response datatype of the phone property is string \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).phone)\r",
									"    pm.expect(typeof JSON.parse(responseBody).phone).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"35.[GetuserByUsername] GetRequest: Check the response datatype of the userStatus property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).userStatus)\r",
									"    pm.expect(typeof JSON.parse(responseBody).userStatus).to.equal(\"number\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"\r",
									"pm.test(\"36.[GetuserByUsername] GetRequest: Check the response value of ashraf: \" + pm.request.url.query.get(\"PetSoteCollection_User_1_PostCreateUser_username\") + \" has value as expected\", function () {\r",
									"    console.log(\"Request username ================= \" +  pm.collectionVariables.get('PetSoteCollection_User_1_PostCreateUser_username'))\r",
									"    console.log(\"Request username ================= \" + JSON.parse(responseBody).username)\r",
									"    pm.expect( pm.collectionVariables.get('PetSoteCollection_User_1_PostCreateUser_username')).to.equal(JSON.parse(responseBody).username);\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"// Validate \"username\" maximum length\r",
									"pm.test(\"37.[GetuserByUsername] GetRequest: Check the value length of the property firstName is at most 10 letters\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName.length).to.be.at.most(10); // Adjust the maximum length as needed\r",
									"});\r",
									"// Validate \"username\" minimum length\r",
									"pm.test(\"38.[GetuserByUsername] GetRequest: Check the value length of the property lastName is at least 5 letters\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName.length).to.be.at.least(5); // Adjust the minimum length as needed\r",
									"});\r",
									"pm.test(\"39.[GetuserByUsername] GetRequest: Check the email format of email\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.match(/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/); // Basic email format check\r",
									"});\r",
									"pm.test(\"40.[GetuserByUsername] GetRequest: Check the password format should not less than 6 digits and include capital and small letter and nubmer\", function () {\r",
									"    // Check if the password has a minimum length of 6 characters and includes at least one uppercase letter, one lowercase letter, and one digit\r",
									"    pm.expect(JSON.parse(responseBody).password).to.match(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{6,}$/);\r",
									"});\r",
									"pm.test(\"41.[GetuserByUsername] GetRequest: Check if the phone number starts with either 2010 2011 and has a total length of 12 characters\", function () {\r",
									"    // Check if the phone number starts with either \"+2010\" or \"+2011\" and has a total length of 12 characters\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.match(/^(\\+2010|\\+2011)\\d{8}$/);\r",
									"});\r",
									"\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"42.[GetuserByUsername] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"43.[PlaceOSrderforPet] PostRequest: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//Content-Type Header in Request:\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"44.[GetuserByUsername] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"45.[GetuserByUsername] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"46.[GetuserByUsername] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"47.[GetuserByUsername] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"48.[GetuserByUsername] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"49.[GetuserByUsername] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/user/{{PetSoteCollection_User_1_PostCreateUser_username}}"
					},
					"response": []
				},
				{
					"name": "3 - Create array Of user within given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateArrayUser_username', JSON.parse(request.data).username);\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateArrayUser_ID', JSON.parse(request.data).id);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[CreateUserArray] PostRequest: Check Status code of CreateUserArray request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[CreateUserArray] PostRequest: Check Status message of CreateUserArray request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[CreateUserArray] PostRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[CreateUserArray] PostRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[CreateUserArray] PostRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[CreateUserArray] PostRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[CreateUserArray] PostRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[CreateUserArray] PostRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[CreateUserArray] PostRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[CreateUserArray] PostRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[CreateUserArray] PostRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[CreateUserArray] PostRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[CreateUserArray] PostRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[CreateUserArray] PostRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[CreateUserArray] PostRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[CreateUserArray] PostRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.equal(200)\r",
									"})\r",
									"pm.test(\"17.[CreateUserArray] PostRequest: Check the response value of type has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.equal(\"unknown\")\r",
									"})\r",
									"pm.test(\"18.[CreateUserArray] PostRequest: Check the response value of message has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.equal(\"ok\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[CreateUserArray] PostRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"20.[CreateUserArray] PostRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[CreateUserArray] PostRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[CreateUserArray] PostRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[CreateUserArray] PostRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[CreateUserArray] PostRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[CreateUserArray] PostRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[CreateUserArray] PostRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1,\r\n    \"username\": \"ahmed\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"waleed\",\r\n    \"email\": \"ahmed@gmail.com\",\r\n    \"password\": \"@bcd123A\",\r\n    \"phone\": \"+201099874514\",\r\n    \"userStatus\": 1\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseurl}}/v2/user/createWithArray"
					},
					"response": []
				},
				{
					"name": "4 - Create List Of user within given input array2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//*****************************Storing the Data for using at the Get Method***********************************/\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateListUser_username', JSON.parse(request.data).username);\r",
									"pm.collectionVariables.set('PetSoteCollection_User_1_PostCreateListUser_ID', JSON.parse(request.data).id);\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[CreateUserList] PostRequest: Check Status code of CreateUserArray request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[CreateUserLis] PostRequest: Check Status message of CreateUserArray request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[CreateUserList] PostRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[CreateUserList] PostRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[CreateUserList] PostRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[CreateUserList] PostRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[CreateUserList] PostRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[CreateUserList] PostRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[CreateUserList] PostRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[CreateUserList] PostRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[CreateUserList] PostRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[CreateUserList] PostRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[CreateUserList] PostRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[CreateUserList] PostRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[CreateUserList] PostRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[CreateUserList] PostRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.equal(200)\r",
									"})\r",
									"pm.test(\"17.[CreateUserList] PostRequest: Check the response value of type has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.equal(\"unknown\")\r",
									"})\r",
									"pm.test(\"18.[CreateUserList] PostRequest: Check the response value of message has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.equal(\"ok\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[CreateUserList] PostRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"20.[CreateUserList] PostRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[CreateUserList] PostRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[CreateUserList] PostRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[CreateUserList] PostRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[CreateUserList] PostRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[CreateUserList] PostRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[CreateUserList] PostRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1,\r\n    \"username\": \"amr\",\r\n    \"firstName\": \"mannas\",\r\n    \"lastName\": \"khaled\",\r\n    \"email\": \"ashraf@gmail.com\",\r\n    \"password\": \"@bcd1234S\",\r\n    \"phone\": \"+20105561875\",\r\n    \"userStatus\": 2\r\n  }\r\n]"
						},
						"url": "{{baseurl}}/v2/user/createWithList"
					},
					"response": []
				},
				{
					"name": "5 - Updated User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[UpdateUser] PUTRequest: Check Status code of CreateUserArray request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[UpdateUser] PUTRequest: Check Status message of CreateUserArray request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[UpdateUser] PUTRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[UpdateUser] PUTRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[UpdateUser] PUTRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[UpdateUser] PUTRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[UpdateUser] PUTRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[UpdateUser] PUTRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[CreateUserList] PUTRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[UpdateUser] PUTRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[UpdateUser] PUTRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[CreateUserList] PUTRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[UpdateUser] PUTRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[UpdateUser] PUTRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[UpdateUser] PUTRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[UpdateUser] PUTRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.equal(200)\r",
									"})\r",
									"pm.test(\"17.[UpdateUser] PUTRequest: Check the response value of type has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.equal(\"unknown\")\r",
									"})\r",
									"pm.test(\"18.[UpdateUser] PUTRequest: Check the response value of message has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.equal(\"1\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[UpdateUser] PUTRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"20.[UpdateUser] PUTRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[UpdateUser] PUTRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[UpdateUser] PUTRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[UpdateUser] PUTRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[UpdateUser] PUTRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[UpdateUser] PUTRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[UpdateUser] PUTRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"ashraf\",\r\n  \"firstName\": \"mohamed\",\r\n  \"lastName\": \"eldesouky\",\r\n  \"email\": \"ashraf@yahoo.com\",\r\n  \"password\": \"@OWWW1234\",\r\n  \"phone\": \"+20150878\",\r\n  \"userStatus\": 33\r\n}"
						},
						"url": "{{baseurl}}/v2/user/{{PetSoteCollection_User_1_PostCreateUser_username}}"
					},
					"response": []
				},
				{
					"name": "6 - Logs user into system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[LogUSerInSystem] GetRequest: Check Status code of CreateUserArray request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[LogUSerInSystem] GetRequest:Check Status message of CreateUserArray request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[LogUSerInSystem] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[LogUSerInSystem] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[LogUSerInSystem] GetRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[[LogUSerInSystem] GetRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[LogUSerInSystem] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[LogUSerInSystem] GetRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[LogUSerInSystem] GetRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[LogUSerInSystem] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[LogUSerInSystem] GetRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[LogUSerInSystem] GetRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[LogUSerInSystem] GetRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[LogUSerInSystem] GetRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[LogUSerInSystem] GetRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[LogUSerInSystem] GetRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.equal(200)\r",
									"})\r",
									"pm.test(\"17.[LogUSerInSystem] GetRequest: Check the response value of type has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.equal(\"unknown\")\r",
									"})\r",
									"// Define a regular expression pattern to match the expected format of the \"message\" property\r",
									"var expectedPattern = /^logged in user session:\\d+$/;\r",
									"// Check if the \"message\" property matches the expected format\r",
									"pm.test(\"18.[LogUSerInSystem] GetRequest: Check the response value of message has value as expected\", function () {\r",
									"    pm.expect(pm.response.json().message).to.match(expectedPattern);\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[[LogUSerInSystem] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"20.[LogUSerInSystem] GetRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[LogUSerInSystem] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[[LogUSerInSystem] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[[LogUSerInSystem] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[LogUSerInSystem] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[LogUSerInSystem] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[LogUSerInSystem] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/v2/user/login?username={{PetSoteCollection_User_1_PostCreateUser_username}}&password={{PetSoteCollection_User_1_PostCreateUser_password}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{PetSoteCollection_User_1_PostCreateUser_username}}"
								},
								{
									"key": "password",
									"value": "{{PetSoteCollection_User_1_PostCreateUser_password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7 - Logs out current login user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[LogoutUSerSession] GetRequest: Check Status code of CreateUserArray request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[LogoutUSerSession] GetRequest: Check Status message of CreateUserArray request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[LogoutUSerSession] GetRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[LogoutUSerSession] GetRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[LogoutUSerSession] GetRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[LogoutUSerSession] GetRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[LogoutUSerSession] GetRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[LogoutUSerSession] GetRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[LogoutUSerSession] GetRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[LogoutUSerSession] GetRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[LogoutUSerSession] GetRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[LogoutUSerSession] GetRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[LogoutUSerSession] GetRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[LogoutUSerSession] GetRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[LogoutUSerSession] GetRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[[LogoutUSerSession] GetRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.equal(200)\r",
									"})\r",
									"pm.test(\"17.[LogUSerInSystem] GetRequest: Check the response value of type has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.equal(\"unknown\")\r",
									"})\r",
									"pm.test(\"18.[LogoutUSerSession] GetRequest: Check the response value of message has value as expected\", function () {\r",
									"     pm.expect(JSON.parse(responseBody).message).to.equal(\"ok\")\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[LogoutUSerSession] GetRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"20.[[LogoutUSerSession] GetRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[LogoutUSerSession] GetRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[LogoutUSerSession] GetRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[[LogoutUSerSession] GetRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[LogoutUSerSession] GetRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[LogoutUSerSession] GetRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[LogoutUSerSession] GetRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/user/logout"
					},
					"response": []
				},
				{
					"name": "8 - Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"//7.Check all response values have expected data type\r",
									"//8.Check The values as expected \r",
									"//9. Business test case :Check length of all attributes at Response body not less than 5 digit\r",
									"//10-Request Header Test Cases\r",
									"//11-Response Header Test Cases:\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"//************************************************************************************************************/\r",
									"//1-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"1.[DeleteUser] DeleteRequest: Check Status code of CreateUserArray request is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//2-Check Status code is 200 as agreed with Backend team\r",
									"pm.test(\"2.[DeleteUser] DeleteRequest: Check Status message of CreateUserArray request is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//3-Check check schema validatoin the response is an array not object\r",
									"pm.test(\"3.[DeleteUser] DeleteRequest: Check if response Body is an array not object\", function () {\r",
									"    var responseData = JSON.parse(responseBody);\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//4- Test Case check schema validatoin the properties are exsiting \r",
									"pm.test(\"4.[DeleteUser] DeleteRequest: Check response schema has property code\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"})\r",
									"pm.test(\"5.[DeleteUser] DeleteRequest: Check response schema has property type\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"})\r",
									"pm.test(\"6.[DeleteUser] DeleteRequest: Check response schema has property message\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//5-Check all attributes in the response have not null value  except the object and array list \r",
									"// because the object and array contain properties\r",
									"pm.test(\"7.[DeleteUser] DeleteRequest: Check code property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"8.[DeleteUser] DeleteRequest: Check type property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"})\r",
									"pm.test(\"9.[DeleteUser] DeleteRequest: Check message property in Response has value is not equal null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//6-Check if the \"properties\" field is not undefined\r",
									"pm.test(\"10.[DeleteUser] DeleteRequest: Check the response has ID attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"11.[DeleteUser] DeleteRequest: Check the response has type attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.be.undefined;\r",
									"});\r",
									"pm.test(\"12.[DeleteUser] DeleteRequest: Check the response has message attribute is not undefined\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.be.undefined;\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//7.Check all response values have expected data type\r",
									"pm.test(\"13.[DeleteUser] DeleteRequest: Check the response datatype of the [code] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).code)\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.equal(\"number\")\r",
									"})\r",
									"pm.test(\"14.[DeleteUser] DeleteRequest: Check the response datatype of the[type]  property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).type)\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.equal(\"string\")\r",
									"})\r",
									"pm.test(\"15.[DeleteUser] DeleteRequest: Check the response datatype of the [message] property is number \", function () {\r",
									"    console.log(typeof JSON.parse(responseBody).message)\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.equal(\"string\")\r",
									"})\r",
									"//************************************************************************************************************/\r",
									"//8.Check The values as expected \r",
									"pm.test(\"16.[DeleteUser] DeleteRequest: Check the response value of ID has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.equal(200)\r",
									"})\r",
									"pm.test(\"17.[DeleteUser] DeleteRequest: Check the response value of type has value as expected\", function () {\r",
									"    // console.log(JSON.parse(responseBody).id)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.equal(\"unknown\")\r",
									"})\r",
									"pm.test(\"18.[DeleteUser] DeleteRequest: Check the response value of message has value as expected\", function () {\r",
									"     pm.expect(JSON.parse(responseBody).message).to.equal(\"ok\")\r",
									"});\r",
									"\r",
									"//************************************************************************************************************/\r",
									"// Business test case\r",
									"//9-Check length of all attributes at Response body not less than 5 digit\r",
									"\r",
									"//************************************************************************************************************/\r",
									"//10-Request Header Test Cases\r",
									"// Accept Header in Request:\r",
									"//  Test Case 1: Check if the \"Accept\" header is present in the request\r",
									"pm.test(\"19.[DeleteUser] DeleteRequest: Check if 'Accept' header is present in the request\", function () {\r",
									"    pm.expect(pm.request.headers.has(\"Accept\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"20.[DeleteUser] DeleteRequest: Check the Request: Accept Header is 'application/json'\", function () {\r",
									"    pm.request.to.have.header(\"Accept\", \"application/json\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									"//11-Response Header Test Cases:\r",
									"//Test Case 1: Check if the \"access-control-allow-headers\" header is present and has the expected value\r",
									"pm.test(\"21.[DeleteUser] DeleteRequest: Check 'access-control-allow-headers' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-headers\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"Content-Type,api_key,Authorization\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"\r",
									"//Test Case 2: Check if the \"access-control-allow-methods\" header is present and has the expected value\r",
									"pm.test(\"22.[DeleteUser] DeleteRequest: Check 'access-control-allow-methods' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\");\r",
									"    var actualValue = pm.response.headers.get(\"access-control-allow-methods\").replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    var expectedValue = \"GET,POST,DELETE,PUT\".replace(/\\s/g, \"\"); // Remove whitespace\r",
									"    pm.expect(actualValue).to.equal(expectedValue);\r",
									"});\r",
									"\r",
									"//Test Case 3: Check if the \"access-control-allow-origin\" header is present and has the expected value\r",
									"pm.test(\"23.[DeleteUser] DeleteRequest: Check 'access-control-allow-origin' header\", function () {\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.equal(\"*\");\r",
									"});\r",
									"//Test Case 4: Check if the \"content-type\" header is present and has the expected value\r",
									"pm.test(\"24.[DeleteUser] DeleteRequest: Check 'content-type' header\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.equal(\"application/json\");\r",
									"});\r",
									"//Test Case 5: Check if the \"date\" header is present\r",
									"pm.test(\"25.[DeleteUser] DeleteRequest: Check 'date' header\", function () {\r",
									"    pm.response.to.have.header(\"date\");\r",
									"});\r",
									"//Test Case 6: Check if the \"server\" header is present\r",
									"pm.test(\"26.[DeleteUser] DeleteRequest: Check 'server' header\", function () {\r",
									"    pm.response.to.have.header(\"server\");\r",
									"});\r",
									"//************************************************************************************************************/\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{baseurl}}/v2/user/{{PetSoteCollection_User_1_PostCreateUser_username}}"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "PetID",
			"value": ""
		},
		{
			"key": "PetIDs",
			"value": ""
		},
		{
			"key": "Petids",
			"value": ""
		},
		{
			"key": "Petids_array",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1.PostCreateUser_username",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateUser_username",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateUser_ID",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreatearrayUser_username",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreatearrayUser_ID",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateListUser_username",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateListUser_ID",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateUser_password",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateArrayUser_username",
			"value": ""
		},
		{
			"key": "PetSoteCollection_User_1_PostCreateArrayUser_ID",
			"value": ""
		}
	]
}